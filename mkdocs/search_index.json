{
    "docs": [
        {
            "location": "/", 
            "text": "Neptune\n\n\nA genomic signature is a genomic locus that is sufficiently represented in an inclusion group, and sufficiently absent from a background, or exclusion group. A signature might correlate genomic features with phenotypic traits, such as the presence of a gene with increased organism pathogenicity.\n\n\nNeptune locates genomic signatures using an exact \nk\n-mer matching strategy while accommodating \nk\n-mer mismatches. The software identifies sequences that are sufficiently represented within inclusion targets and sufficiently absent from exclusion targets. The signature discovery process is accomplished using probabilistic models instead of heuristic strategies. Neptune may be leveraged to reveal discriminatory signature sequences to uniquely delineate one group of organisms, such as isolates associated with a disease cluster or event, from unrelated sporadic or environmental microbes.\n\n\nRelease\n\n\nNeptune 1.2.4\n\n\nThis release makes several small improvements, including: reducing the standard output clutter, adding timings to stages, and updating the documentation.\n\n\nResources\n\n\n\n\nInstallation\n: \nhttps://phac-nml.github.io/neptune/install/\n\n\nWalkthrough\n: \nhttps://phac-nml.github.io/neptune/walkthrough/\n\n\n\n\nContact\n\n\n\n\nEric Marinier\n: eric.marinier@phac-aspc.gc.ca\n\n\nGary van Domselaar\n: gary.vandomselaar@phac-aspc.gc.ca", 
            "title": "Home"
        }, 
        {
            "location": "/#neptune", 
            "text": "A genomic signature is a genomic locus that is sufficiently represented in an inclusion group, and sufficiently absent from a background, or exclusion group. A signature might correlate genomic features with phenotypic traits, such as the presence of a gene with increased organism pathogenicity.  Neptune locates genomic signatures using an exact  k -mer matching strategy while accommodating  k -mer mismatches. The software identifies sequences that are sufficiently represented within inclusion targets and sufficiently absent from exclusion targets. The signature discovery process is accomplished using probabilistic models instead of heuristic strategies. Neptune may be leveraged to reveal discriminatory signature sequences to uniquely delineate one group of organisms, such as isolates associated with a disease cluster or event, from unrelated sporadic or environmental microbes.", 
            "title": "Neptune"
        }, 
        {
            "location": "/#release", 
            "text": "Neptune 1.2.4  This release makes several small improvements, including: reducing the standard output clutter, adding timings to stages, and updating the documentation.", 
            "title": "Release"
        }, 
        {
            "location": "/#resources", 
            "text": "Installation :  https://phac-nml.github.io/neptune/install/  Walkthrough :  https://phac-nml.github.io/neptune/walkthrough/", 
            "title": "Resources"
        }, 
        {
            "location": "/#contact", 
            "text": "Eric Marinier : eric.marinier@phac-aspc.gc.ca  Gary van Domselaar : gary.vandomselaar@phac-aspc.gc.ca", 
            "title": "Contact"
        }, 
        {
            "location": "/news/", 
            "text": "News\n\n\nBioconda Installation\n\n\n2017-04-07\n\n\nWe have added instructions for how to install Neptune using \nBioconda\n in the \nconda\n package manager. This may simplify installation of Neptune for many users.", 
            "title": "News"
        }, 
        {
            "location": "/news/#news", 
            "text": "", 
            "title": "News"
        }, 
        {
            "location": "/news/#bioconda-installation", 
            "text": "2017-04-07  We have added instructions for how to install Neptune using  Bioconda  in the  conda  package manager. This may simplify installation of Neptune for many users.", 
            "title": "Bioconda Installation"
        }, 
        {
            "location": "/CHANGELOG/", 
            "text": "Change Log\n\n\nAll notable changes to Neptune will be documented in this file.\n\n\n1.2.4\n\n\n2017-02-27\n\n\nThis release makes several small improvements, including: reducing the standard\noutput clutter, adding timings to stages, and updating the documentation.\n\n\nAdded\n\n\n\n\nLinks in the README to the manual.\n\n\nWalkthrough to the manual.\n\n\nExample data to test the software.\n\n\nTimings for stages.\n\n\n\n\nChanged\n\n\n\n\nImproved clarity in manual.\n\n\nCodeblocks in the manual.\n\n\n\n\nRemoved\n\n\n\n\nConsiderable clutter has been removed from standard output.\n\n\n\n\n1.2.3\n\n\n2016-07-11\n\n\nThis release simplifies the installation process.\n\n\nAdded\n\n\n\n\nA script for automatically installing Debian dependencies.\n\n\n\n\nChanged\n\n\n\n\nThe dependencies have changed. Several are now installed as part of Neptune.\n\n\nThe Neptune installation no longer requires security privilages.\n\n\nNeptune may be installed multiple times in multiple locations.\n\n\nNumPy and SciPy are now installed using pip.\n\n\n\n\n1.2.2\n\n\n2016-04-06\n\n\nThis release includes some Galaxy improvements and fixes a signature scoring problem.\n\n\nChanged\n\n\n\n\nGalaxy XML files have been updated to use different packages of Python.\n\n\n\n\nFixed\n\n\n\n\nA bug confusing inclusion and exclusion has been fixed.\n\n\n\n\n1.2.1\n\n\n2016-03-23\n\n\nThis release of Neptune adds support for Galaxy.\n\n\nAdded\n\n\n\n\nGalaxy-related files: capsules, XML files.\n\n\n\n\nChanged\n\n\n\n\nNeptune.py and Execution.py are now compatible with Galaxy.\n\n\n\n\n1.2.0\n\n\n2016-03-18\n\n\nThis release of Neptune allows for execution on a single machine without\nrequiring DRMAA. Furthermore, several command line parameters have been\nmodified.\n\n\nAdded\n\n\n\n\nNeptune may be run in parallel on a single machine without DRMAA.\n\n\n\"--version\" command line option.\n\n\n\n\nChanged\n\n\n\n\nSeveral command-line parameters have been changed.\n\n\nThe \"--parallelization\" / \"-p\" parameter effects all parallelization.\n\n\nThe exclusion score is now displayed as a positive number.\n\n\n\n\n1.1.1\n\n\n2016-02-24\n\n\nThis release of Neptune updates the installation instructions to be more\ninformative.\n\n\nChanged\n\n\n\n\nUpdated README and manual installation instructions.\n\n\nModified the style of code examples in the manual.\n\n\n\n\n1.1.0\n\n\n2016-01-19\n\n\nThis release of Neptune introduces a simple signature consolidation step, which\nconsolidates signatures produced from multiple files into a single file.\nFurthermore, the software has been updated to be compatible with the Slurm\nscheduler.\n\n\nAdded\n\n\n\n\nNeptune now automatically consolidates signatures into a single file.\n\n\nDRMAA job names.\n\n\nNeptune now maintains DRMAA log files.\n\n\nAdded the ability to specify the BLAST seed size.\n\n\n\n\nChanged\n\n\n\n\nThe run receipt has been reorganized.\n\n\nRemoved some unneeded output files.\n\n\nRemoved some unneeded print statements.\n\n\nRemoved the --verbose parameter. There was no functionality.\n\n\n\n\nFixed\n\n\n\n\nNeptune is now compatible with the Slurm scheduler.\n\n\nUpdated PEP8/Flake8 code compliance (W503).\n\n\n\n\n1.0.0\n\n\n2015-11-18\n\n\nThis is the initial release of Neptune.", 
            "title": "CHANGELOG"
        }, 
        {
            "location": "/CHANGELOG/#change-log", 
            "text": "All notable changes to Neptune will be documented in this file.", 
            "title": "Change Log"
        }, 
        {
            "location": "/CHANGELOG/#124", 
            "text": "2017-02-27  This release makes several small improvements, including: reducing the standard\noutput clutter, adding timings to stages, and updating the documentation.", 
            "title": "1.2.4"
        }, 
        {
            "location": "/CHANGELOG/#added", 
            "text": "Links in the README to the manual.  Walkthrough to the manual.  Example data to test the software.  Timings for stages.", 
            "title": "Added"
        }, 
        {
            "location": "/CHANGELOG/#changed", 
            "text": "Improved clarity in manual.  Codeblocks in the manual.", 
            "title": "Changed"
        }, 
        {
            "location": "/CHANGELOG/#removed", 
            "text": "Considerable clutter has been removed from standard output.", 
            "title": "Removed"
        }, 
        {
            "location": "/CHANGELOG/#123", 
            "text": "2016-07-11  This release simplifies the installation process.", 
            "title": "1.2.3"
        }, 
        {
            "location": "/CHANGELOG/#added_1", 
            "text": "A script for automatically installing Debian dependencies.", 
            "title": "Added"
        }, 
        {
            "location": "/CHANGELOG/#changed_1", 
            "text": "The dependencies have changed. Several are now installed as part of Neptune.  The Neptune installation no longer requires security privilages.  Neptune may be installed multiple times in multiple locations.  NumPy and SciPy are now installed using pip.", 
            "title": "Changed"
        }, 
        {
            "location": "/CHANGELOG/#122", 
            "text": "2016-04-06  This release includes some Galaxy improvements and fixes a signature scoring problem.", 
            "title": "1.2.2"
        }, 
        {
            "location": "/CHANGELOG/#changed_2", 
            "text": "Galaxy XML files have been updated to use different packages of Python.", 
            "title": "Changed"
        }, 
        {
            "location": "/CHANGELOG/#fixed", 
            "text": "A bug confusing inclusion and exclusion has been fixed.", 
            "title": "Fixed"
        }, 
        {
            "location": "/CHANGELOG/#121", 
            "text": "2016-03-23  This release of Neptune adds support for Galaxy.", 
            "title": "1.2.1"
        }, 
        {
            "location": "/CHANGELOG/#added_2", 
            "text": "Galaxy-related files: capsules, XML files.", 
            "title": "Added"
        }, 
        {
            "location": "/CHANGELOG/#changed_3", 
            "text": "Neptune.py and Execution.py are now compatible with Galaxy.", 
            "title": "Changed"
        }, 
        {
            "location": "/CHANGELOG/#120", 
            "text": "2016-03-18  This release of Neptune allows for execution on a single machine without\nrequiring DRMAA. Furthermore, several command line parameters have been\nmodified.", 
            "title": "1.2.0"
        }, 
        {
            "location": "/CHANGELOG/#added_3", 
            "text": "Neptune may be run in parallel on a single machine without DRMAA.  \"--version\" command line option.", 
            "title": "Added"
        }, 
        {
            "location": "/CHANGELOG/#changed_4", 
            "text": "Several command-line parameters have been changed.  The \"--parallelization\" / \"-p\" parameter effects all parallelization.  The exclusion score is now displayed as a positive number.", 
            "title": "Changed"
        }, 
        {
            "location": "/CHANGELOG/#111", 
            "text": "2016-02-24  This release of Neptune updates the installation instructions to be more\ninformative.", 
            "title": "1.1.1"
        }, 
        {
            "location": "/CHANGELOG/#changed_5", 
            "text": "Updated README and manual installation instructions.  Modified the style of code examples in the manual.", 
            "title": "Changed"
        }, 
        {
            "location": "/CHANGELOG/#110", 
            "text": "2016-01-19  This release of Neptune introduces a simple signature consolidation step, which\nconsolidates signatures produced from multiple files into a single file.\nFurthermore, the software has been updated to be compatible with the Slurm\nscheduler.", 
            "title": "1.1.0"
        }, 
        {
            "location": "/CHANGELOG/#added_4", 
            "text": "Neptune now automatically consolidates signatures into a single file.  DRMAA job names.  Neptune now maintains DRMAA log files.  Added the ability to specify the BLAST seed size.", 
            "title": "Added"
        }, 
        {
            "location": "/CHANGELOG/#changed_6", 
            "text": "The run receipt has been reorganized.  Removed some unneeded output files.  Removed some unneeded print statements.  Removed the --verbose parameter. There was no functionality.", 
            "title": "Changed"
        }, 
        {
            "location": "/CHANGELOG/#fixed_1", 
            "text": "Neptune is now compatible with the Slurm scheduler.  Updated PEP8/Flake8 code compliance (W503).", 
            "title": "Fixed"
        }, 
        {
            "location": "/CHANGELOG/#100", 
            "text": "2015-11-18  This is the initial release of Neptune.", 
            "title": "1.0.0"
        }, 
        {
            "location": "/install/", 
            "text": "Installation\n\n\nThis installation guide assumes the use of the \nBASH\n Unix shell and a 64-bit Linux system. Neptune may either be installed directly or as a \nBioconda\n package. Neptune may either be run on a single machine or a computing cluster. Neptune achieves maximum parallelization when submitting jobs through a DRMAA-compliant cluster computing scheduler. The installation and configuration of a DRMAA-compliant scheduler will require a significant understanding of Unix. However, it is possible to run Neptune in parallel on a single machine without DRMAA. Neptune is known to be compatible with the \nSGE\n and \nSlurm\n schedulers.\n\n\nBioconda\n\n\nThe simpliest way to install Neptune is using the \nBioconda\n channel for the \nconda\n package management system. We recommend installing conda with the \nMiniconda\n package. There are two variants of the Miniconda installer: Python 2.7 and Python 3.6. However, the choice of Miniconda only affects the Python version in root environment. We recommend installing Miniconda using Python 2.7 64-bit Linux \ninstaller\n. Otherwise, you will need to explicitly use Neptune within a \nconda environment\n.\n\n\nOverview\n\n\nThe Bioconda-based Neptune installation involves the following:\n\n\n\n\nInstalling \nBioconda\n\n\nInstalling the \"neptune\" Bioconda package (\nconda install neptune\n).\n\n\n\n\nWe provide detailed instructions below.\n\n\nMiniconda (Python 2.7)\n\n\nBioconda\n requires conda to be installed and we recommend using the \nMiniconda\n package. Miniconda may be installed with the follow instructions:\n\n\nwget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh\nchmod 755 Miniconda2-latest-Linux-x86_64.sh\n./Miniconda2-latest-Linux-x86_64.sh\n\n\n\n\nYou will likely want Miniconda to append the install location to your PATH and will need to select this option during the installation process. After installation, you will then need to either open a new terminal or source your bashrc file in the current terminal for Miniconda to become available on the PATH:\n\n\nsource ~/.bashrc\n\n\n\n\nYou can check if your Miniconda installation was successful with the following:\n\n\nconda --version\n\n\n\n\nBioconda\n\n\nYou will need to add the following channels to conda. They must be added in this order so that priority is set correctly.\n\n\nconda config --add channels conda-forge\nconda config --add channels defaults\nconda config --add channels r\nconda config --add channels bioconda\n\n\n\n\nNeptune (Miniconda 2.7)\n\n\nThe following instructions assume you are using Miniconda with Python 2.7, as described above. After enabling Bioconda, Neptune may be installed as a Bioconda package with the following:\n\n\nconda install neptune\n\n\n\n\nYou can check if Neptune was installed correctly with the following:\n\n\nneptune --version\n\n\n\n\nNeptune (Miniconda 3.6)\n\n\nThe follwing instructions assume you are using the Python 3.6 version of Miniconda. In this circumstance, we need to install Neptune within a Python 2.7 environment:\n\n\nconda create --name neptune python=2.7 neptune\n\n\n\n\nThis Neptune environment can be activated with the following:\n\n\nsource activate neptune\n\n\n\n\nYou can check if Neptune was installed correctly with the following:\n\n\nneptune --version\n\n\n\n\nThe current environment may be deactivated with the following:\n\n\nsource deactivate\n\n\n\n\nIt is important to note that this Neptune Bioconda environment will need to be activated in order to run the Neptune application. However, the benefit is that your system will be shielded from the Python 2.7 installation required by Neptune.\n\n\nDirect\n\n\nThe following instructions describe how to install Neptune directly. These instructions will likely require administrative privilages.\n\n\nOverview\n\n\nThe direct Neptune installation involves the following:\n\n\n\n\nInstalling Python 2.7\n\n\nInstalling dependencies (Ubuntu: \nsudo neptune/install/debian_dependencies.sh\n)\n\n\nInstalling Neptune (\nneptune/INSTALL.sh\n)\n\n\n\n\nWe provide more detailed instructions below.\n\n\nPython\n\n\nNeptune requires Python 2.7. Note that Python 2.7 is provided with many major distributions of Linux. The following may check your Python version:\n\n\npython --version\n\n\n\n\nDependencies\n\n\nDebian-Based Installation\n\n\nThis section assumes the user has the \nAPT\n package manager. This is common to the \nUbuntu\n operating system. However, this section should be compatible with any 64-bit Debian distribution. The following operation will automatically install Neptune's dependencies and require security privileges (sudo) to install the dependencies:\n\n\nsudo neptune/install/debian_dependencies.sh\n\n\n\n\nManual Installation\n\n\nIf you cannot install the dependencies using the above script, the following dependencies must be manually installed, if necessary, by the user:\n\n\n\n\npip\n\n\nvirtualenv\n\n\nbuild-essential\n\n\npython-dev\n\n\nNCBI BLAST+\n\n\n\n\nNeptune\n\n\nNeptune will be installed using pip into its own Python virtual environment. The following will install Neptune locally into the source directory and will not require security privileges:\n\n\nneptune/INSTALL.sh\n\n\n\n\nAlternatively, you may specify an install location, PREFIX, such as /usr/local/. Neptune will create the directories PREFIX/lib and PREFIX/bin. This may require security privileges:\n\n\nneptune/INSTALL.sh PREFIX", 
            "title": "Neptune"
        }, 
        {
            "location": "/install/#installation", 
            "text": "This installation guide assumes the use of the  BASH  Unix shell and a 64-bit Linux system. Neptune may either be installed directly or as a  Bioconda  package. Neptune may either be run on a single machine or a computing cluster. Neptune achieves maximum parallelization when submitting jobs through a DRMAA-compliant cluster computing scheduler. The installation and configuration of a DRMAA-compliant scheduler will require a significant understanding of Unix. However, it is possible to run Neptune in parallel on a single machine without DRMAA. Neptune is known to be compatible with the  SGE  and  Slurm  schedulers.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#bioconda", 
            "text": "The simpliest way to install Neptune is using the  Bioconda  channel for the  conda  package management system. We recommend installing conda with the  Miniconda  package. There are two variants of the Miniconda installer: Python 2.7 and Python 3.6. However, the choice of Miniconda only affects the Python version in root environment. We recommend installing Miniconda using Python 2.7 64-bit Linux  installer . Otherwise, you will need to explicitly use Neptune within a  conda environment .", 
            "title": "Bioconda"
        }, 
        {
            "location": "/install/#overview", 
            "text": "The Bioconda-based Neptune installation involves the following:   Installing  Bioconda  Installing the \"neptune\" Bioconda package ( conda install neptune ).   We provide detailed instructions below.", 
            "title": "Overview"
        }, 
        {
            "location": "/install/#miniconda-python-27", 
            "text": "Bioconda  requires conda to be installed and we recommend using the  Miniconda  package. Miniconda may be installed with the follow instructions:  wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh\nchmod 755 Miniconda2-latest-Linux-x86_64.sh\n./Miniconda2-latest-Linux-x86_64.sh  You will likely want Miniconda to append the install location to your PATH and will need to select this option during the installation process. After installation, you will then need to either open a new terminal or source your bashrc file in the current terminal for Miniconda to become available on the PATH:  source ~/.bashrc  You can check if your Miniconda installation was successful with the following:  conda --version", 
            "title": "Miniconda (Python 2.7)"
        }, 
        {
            "location": "/install/#bioconda_1", 
            "text": "You will need to add the following channels to conda. They must be added in this order so that priority is set correctly.  conda config --add channels conda-forge\nconda config --add channels defaults\nconda config --add channels r\nconda config --add channels bioconda", 
            "title": "Bioconda"
        }, 
        {
            "location": "/install/#neptune-miniconda-27", 
            "text": "The following instructions assume you are using Miniconda with Python 2.7, as described above. After enabling Bioconda, Neptune may be installed as a Bioconda package with the following:  conda install neptune  You can check if Neptune was installed correctly with the following:  neptune --version", 
            "title": "Neptune (Miniconda 2.7)"
        }, 
        {
            "location": "/install/#neptune-miniconda-36", 
            "text": "The follwing instructions assume you are using the Python 3.6 version of Miniconda. In this circumstance, we need to install Neptune within a Python 2.7 environment:  conda create --name neptune python=2.7 neptune  This Neptune environment can be activated with the following:  source activate neptune  You can check if Neptune was installed correctly with the following:  neptune --version  The current environment may be deactivated with the following:  source deactivate  It is important to note that this Neptune Bioconda environment will need to be activated in order to run the Neptune application. However, the benefit is that your system will be shielded from the Python 2.7 installation required by Neptune.", 
            "title": "Neptune (Miniconda 3.6)"
        }, 
        {
            "location": "/install/#direct", 
            "text": "The following instructions describe how to install Neptune directly. These instructions will likely require administrative privilages.", 
            "title": "Direct"
        }, 
        {
            "location": "/install/#overview_1", 
            "text": "The direct Neptune installation involves the following:   Installing Python 2.7  Installing dependencies (Ubuntu:  sudo neptune/install/debian_dependencies.sh )  Installing Neptune ( neptune/INSTALL.sh )   We provide more detailed instructions below.", 
            "title": "Overview"
        }, 
        {
            "location": "/install/#python", 
            "text": "Neptune requires Python 2.7. Note that Python 2.7 is provided with many major distributions of Linux. The following may check your Python version:  python --version", 
            "title": "Python"
        }, 
        {
            "location": "/install/#dependencies", 
            "text": "", 
            "title": "Dependencies"
        }, 
        {
            "location": "/install/#debian-based-installation", 
            "text": "This section assumes the user has the  APT  package manager. This is common to the  Ubuntu  operating system. However, this section should be compatible with any 64-bit Debian distribution. The following operation will automatically install Neptune's dependencies and require security privileges (sudo) to install the dependencies:  sudo neptune/install/debian_dependencies.sh", 
            "title": "Debian-Based Installation"
        }, 
        {
            "location": "/install/#manual-installation", 
            "text": "If you cannot install the dependencies using the above script, the following dependencies must be manually installed, if necessary, by the user:   pip  virtualenv  build-essential  python-dev  NCBI BLAST+", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/install/#neptune", 
            "text": "Neptune will be installed using pip into its own Python virtual environment. The following will install Neptune locally into the source directory and will not require security privileges:  neptune/INSTALL.sh  Alternatively, you may specify an install location, PREFIX, such as /usr/local/. Neptune will create the directories PREFIX/lib and PREFIX/bin. This may require security privileges:  neptune/INSTALL.sh PREFIX", 
            "title": "Neptune"
        }, 
        {
            "location": "/install-drmaa/", 
            "text": "DRMAA\n\n\nThe following is only necessary for execution of Neptune in DRMAA mode on a cluster computing environment. These instructions require a strong understanding of Unix and cluster computing configuration. The user will need to manually install and configure a DRMAA-compliant scheduler, such as \nSGE\n or \nSlurm\n, on either a single machine or on a computing cluster. The user will additionally need to install and configure Python DRMAA bindings with considerations for the DRMAA-compliant scheduler.\n\n\nDRMAA Requirements\n\n\nThe following are required to operate Neptune in DRMAA mode:\n\n\n\n\nDRMAA-Compliant Scheduler\n\n\nPython DRMAA Bindings\n\n\n\n\nDRMAA-Compliant Scheduler\n\n\nNeptune has been tested using SGE installed on a single machine with the following instructions:\n\n\nhttps://scidom.wordpress.com/2012/01/18/sge-on-single-pc/\n\n\nFurthermore, Neptune has been tested using Slurm on a large computing cluster. However, any DRMAA-compliant scheduler is expected to work. The instructions for installing and configuring such scheduling environments are beyond the scope of this resource.\n\n\nPython DRMAA Bindings\n\n\nNeptune uses a Python DRMAA binding to schedule DRMAA jobs and communicate with the scheduler. The information necessary for installing and configuring the Python DRMAA bindings is available the following location:\n\n\nhttps://github.com/pygridtools/drmaa-python\n\n\nDRMAA Installation\n\n\nIt may be helpful to create a submission wrapper script for Neptune to avoid entering the same DRMAA native specification parameters for every submission. The following SGE and Slurm submission wrapper scripts automatically include native specification parameters, appropriate for the scheduling environment, which may be overwritten by the submitting user as necessary.\n\n\nSlurm\n\n\nWrapper\n\n\n#!/usr/bin/env bash\n\nDRMAA_LIBRARY_PATH=/usr/local/lib/libdrmaa.so.1\n\nneptune --drmaa --default-specification \n-n 1 --nodes=1 --ntasks-per-node=1 --mem=10240\n $@\n\n\n\n\nExample\n\n\nneptune-slurm -i /path/to/inclusion/ -e /path/to/exclusion/ -o /path/to/output/\n\n\n\n\nSGE\n\n\nWrapper\n\n\n#!/usr/bin/env bash\n\nDRMAA_LIBRARY_PATH=/opt/gridengine/lib/linux-x64/libdrmaa.so\n\nneptune --drmaa --default-specification \n-l h_vmem=8G -pe smp 4\n $@\n\n\n\n\nExample\n\n\nneptune-sge -i /path/to/inclusion/ -e /path/to/exclusion/ -o /path/to/output/", 
            "title": "DRMAA Configuration"
        }, 
        {
            "location": "/install-drmaa/#drmaa", 
            "text": "The following is only necessary for execution of Neptune in DRMAA mode on a cluster computing environment. These instructions require a strong understanding of Unix and cluster computing configuration. The user will need to manually install and configure a DRMAA-compliant scheduler, such as  SGE  or  Slurm , on either a single machine or on a computing cluster. The user will additionally need to install and configure Python DRMAA bindings with considerations for the DRMAA-compliant scheduler.", 
            "title": "DRMAA"
        }, 
        {
            "location": "/install-drmaa/#drmaa-requirements", 
            "text": "The following are required to operate Neptune in DRMAA mode:   DRMAA-Compliant Scheduler  Python DRMAA Bindings", 
            "title": "DRMAA Requirements"
        }, 
        {
            "location": "/install-drmaa/#drmaa-compliant-scheduler", 
            "text": "Neptune has been tested using SGE installed on a single machine with the following instructions:  https://scidom.wordpress.com/2012/01/18/sge-on-single-pc/  Furthermore, Neptune has been tested using Slurm on a large computing cluster. However, any DRMAA-compliant scheduler is expected to work. The instructions for installing and configuring such scheduling environments are beyond the scope of this resource.", 
            "title": "DRMAA-Compliant Scheduler"
        }, 
        {
            "location": "/install-drmaa/#python-drmaa-bindings", 
            "text": "Neptune uses a Python DRMAA binding to schedule DRMAA jobs and communicate with the scheduler. The information necessary for installing and configuring the Python DRMAA bindings is available the following location:  https://github.com/pygridtools/drmaa-python", 
            "title": "Python DRMAA Bindings"
        }, 
        {
            "location": "/install-drmaa/#drmaa-installation", 
            "text": "It may be helpful to create a submission wrapper script for Neptune to avoid entering the same DRMAA native specification parameters for every submission. The following SGE and Slurm submission wrapper scripts automatically include native specification parameters, appropriate for the scheduling environment, which may be overwritten by the submitting user as necessary.", 
            "title": "DRMAA Installation"
        }, 
        {
            "location": "/install-drmaa/#slurm", 
            "text": "", 
            "title": "Slurm"
        }, 
        {
            "location": "/install-drmaa/#wrapper", 
            "text": "#!/usr/bin/env bash\n\nDRMAA_LIBRARY_PATH=/usr/local/lib/libdrmaa.so.1\n\nneptune --drmaa --default-specification  -n 1 --nodes=1 --ntasks-per-node=1 --mem=10240  $@", 
            "title": "Wrapper"
        }, 
        {
            "location": "/install-drmaa/#example", 
            "text": "neptune-slurm -i /path/to/inclusion/ -e /path/to/exclusion/ -o /path/to/output/", 
            "title": "Example"
        }, 
        {
            "location": "/install-drmaa/#sge", 
            "text": "", 
            "title": "SGE"
        }, 
        {
            "location": "/install-drmaa/#wrapper_1", 
            "text": "#!/usr/bin/env bash\n\nDRMAA_LIBRARY_PATH=/opt/gridengine/lib/linux-x64/libdrmaa.so\n\nneptune --drmaa --default-specification  -l h_vmem=8G -pe smp 4  $@", 
            "title": "Wrapper"
        }, 
        {
            "location": "/install-drmaa/#example_1", 
            "text": "neptune-sge -i /path/to/inclusion/ -e /path/to/exclusion/ -o /path/to/output/", 
            "title": "Example"
        }, 
        {
            "location": "/parameters/", 
            "text": "Parameters\n\n\nA help message may be viewed by running:\n\n\nneptune --help\n\n\n\n\nMandatory\n\n\nNeptune requires the location of the inclusion, exclusion, and output directories. The remaining parameters will be estimated based on the input sequence or revert to default settings. The following is the minimum number of command line parameters required to run Neptune:\n\n\nneptune\n    --inclusion /path/to/inclusion/directory/\n    --exclusion /path/to/exclusion/directory/\n    --output /path/to/output/directory/\n\n\n\n\nThe following parameters are required by Neptune:\n\n\n\n\n\n\n\n\nOption\n\n\nAlternative\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-i\n\n\n--inclusion\n\n\nFASTA\n\n\nA list of inclusion targets in FASTA format. You may list multiple file or directory locations following the parameter. Neptune will automatically include all files within directories. However, Neptune will not recurse into additional directories.\n\n\n\n\n\n\n-e\n\n\n--exclusion\n\n\nFASTA\n\n\nA list of exclusion targets in FASTA format. You may list multiple file or directory locations following the parameter. Neptune will automatically include all files within directories. However, Neptune will not recurse into additional directories.\n\n\n\n\n\n\n-o\n\n\n--output\n\n\ndirectory\n\n\nThe location of the output directory. If this directory exists, any files produced with existing names will be overwritten. If this directory does not exist, then it will be created.\n\n\n\n\n\n\n\n\nOptional\n\n\nThe optional parameters will either be automatically calculated or be assigned default values.\n\n\nk\n-mer\n\n\nThe following parameters relate to \nk\n-mer generation and aggregation:\n\n\n\n\n\n\n\n\nOption\n\n\nAlternative\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-k\n\n\n--kmer\n\n\ninteger\n\n\nThe size of the \nk\n-mers. This must be a positive integer and should be large enough such that random intra-genome \nk\n-mer matches, within the largest genome, are unexpected. The size of \nk\n-mers cannot be larger than the smallest sequence record. This will be automatically calculated if not specified.\n\n\n\n\n\n\n\n\n--organization\n\n\ninteger\n\n\nThe degree of organization of \nk\n-mer counting and aggregation. This parameter determines the number nucleotide bases used in parallelized \nk\n-mer counting and, in turn, the number of parallel instances of \nk\n-mer aggregation. The number of parallel instances is determined by 4^n, where n is the specified organization parameter. This value must be a non-negative integer smaller than \nk\n. If the parameter is not specified, then n = 0 and there will be no parallel \nk\n-mer aggregation. This will likely require a much longer computation time to complete \nk\n-mer aggregation.\n\n\n\n\n\n\n\n\nFiltering\n\n\nThe following command-line parameters relate to signature filtering:\n\n\n\n\n\n\n\n\nOption\n\n\nAlternative\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n--filter-length\n\n\nfloat\n\n\nThe minimum percent length of a signature candidate against a exclusion target required to filter out the candidate. This value is a percentage expressed as a floating point number [0.0, 1.0]. If the any exclusion hit exceeds the percent length \nand\n percent identity of any candidate, the candidate is removed. The default value is 0.5.\n\n\n\n\n\n\n\n\n--filter-percent\n\n\nfloat\n\n\nThe minimum percent identity of a signature candidate against a exclusion target required to filter out the candidate. The percent identity is calculated as identities divided by the alignment length. This value is a percentage expressed as a floating point number [0.0, 1.0]. If the any exclusion hit exceeds the percent length \nand\n percent identity of any candidate, the candidate is removed. The default value is 0.5.\n\n\n\n\n\n\n\n\n--seed-size\n\n\ninteger\n\n\nThe seed size used for alignments. This value must be no smaller than 4. The default value is 11.\n\n\n\n\n\n\n\n\nExtraction\n\n\nThe following command-line parameters relate to signature extraction:\n\n\n\n\n\n\n\n\nOption\n\n\nAlternative\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-r\n\n\n--reference\n\n\nFASTA\n\n\nA list of references from which to extract signatures. If this parameter is not specified, signatures will be extracted from \nall\n inclusion targets. You may list multiple file locations following the --reference parameter.\n\n\n\n\n\n\n\n\n--rate\n\n\nfloat\n\n\nThe probability (0.0, 1.0) that any two homologous bases are different from each other. This should incorporate mutation rates, sequencing error rates, and assembly error rates. The rate is used to calculate the maximum allowable gap size in a signature and the minimum expected number of exact \nk\n-mer matches in a signature. If this value is not specified, the rate is assumed to be 0.01.\n\n\n\n\n\n\n\n\n--gc-content\n\n\nfloat\n\n\nThe expected GC-content of the environment. The GC-content is used to calculate the maximum allowable gap size in a signature and the minimum expected number of exact \nk\n-mer matches in a signature. If this value is not specified, it is calculated by observing the GC-content of each target during signature extraction. The value must be between (0.0, 1.0).\n\n\n\n\n\n\n\n\n--confidence\n\n\nfloat\n\n\nThe statistical confidence of decision making in the software. The confidence affects the automatic calculation of both the maximum gap size and minimum number of inclusion hits. If this value is not specified, a default of 0.95 is used. The value must be between (0.0, 1.0).\n\n\n\n\n\n\n\n\n--inhits\n\n\ninteger\n\n\nThe minimum number of inclusion hits required to start and continue signature extraction. If this value is not specified, it will be automatically calculated using the number of inclusion targets, the GC-content, the rate, and the \nk\n-mer size. The calculation can be found in the \nMathematics\n documentation. This value must be a positive integer.\n\n\n\n\n\n\n\n\n--exhits\n\n\ninteger\n\n\nThe minimum number of exclusion hits necessary to stop extraction of a signature. If this value is not specified, it is assumed to be 1. This value must be a positive integer.\n\n\n\n\n\n\n\n\n--gap\n\n\nint\n\n\nThe maximum allowable number of base positions shifted before seeing an exact \nk\n-mer match. If this value is not specified, it will be automatically calculated using the rate, GC-content, and the \nk\n-mer size. The calculation can be found in the \nMathematics\n documentation. This value must be a positive integer.\n\n\n\n\n\n\n\n\n--size\n\n\nint\n\n\nThe minimum size for a signature. Signatures which are shorter than this length will not be reported. If this value is not specified, the minimum signature size will be four times the length of the \nk\n-mer size. It is not recommended to locate signatures smaller than this size, unless application-specific. This value must be a positive integer.\n\n\n\n\n\n\n\n\nParallelization\n\n\nThe following parameters relate to the parallelization of Neptune:\n\n\n\n\n\n\n\n\nOption\n\n\nAlternative\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-p\n\n\n--parallelization\n\n\ninteger\n\n\nThe number of parallel working processes to create when Neptune is operating in a non-DRMAA mode (default). This parameter will directly increase the speed of many stages of the software, provided there are sufficient resources available to run the worker process simultaneously. This value must be a positive integer. The default value is 8.\n\n\n\n\n\n\n\n\nDRMAA\n\n\nIt may be necessary to specify job submission parameters that are required by your cluster-computing environment. If you require DRM-specific command line arguments, they may be provided to Neptune using one of several arguments. The --default-specification parameter will provide the DRM-specific arguments to all jobs which are created. Additional command line arguments allow precise specifications for each type of job.\n\n\n\n\n\n\n\n\nOption\n\n\nAlternative\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n--drmaa\n\n\nflag\n\n\nThis flag enables DRMAA-based Neptune execution. This will require a DRMAA-compatible cluster computing environment to be installed and configured. However, Neptune will likely operate significantly faster in this environment.\n\n\n\n\n\n\n\n\n--default-specification\n\n\nstring\n\n\nDRMAA-specific command line arguments for all jobs. These arguments must be provided as a quoted string. The default specification will be applied to all job types and overwritten when specified.\n\n\n\n\n\n\n\n\n--count-specification\n\n\nstring\n\n\nDRMAA-specific command line arguments for \\textit{k}-mer counting. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.\n\n\n\n\n\n\n\n\n--aggregate-specification\n\n\nstring\n\n\nDRMAA-specific command line arguments for \\textit{k}-mer aggregation. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.\n\n\n\n\n\n\n\n\n--extract-specification\n\n\nstring\n\n\nDRMAA-specific command line arguments for signature extraction. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.\n\n\n\n\n\n\n\n\n--database-specification\n\n\nstring\n\n\nDRMAA-specific command line arguments for database construction. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.\n\n\n\n\n\n\n\n\n--filter-specification\n\n\nstring\n\n\nDRMAA-specific command line arguments for candidate signature filtering. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.\n\n\n\n\n\n\n\n\n--consolidate-specification\n\n\nstring\n\n\nDRMAA-specific command line arguments for signature consolidation. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.", 
            "title": "Parameters"
        }, 
        {
            "location": "/parameters/#parameters", 
            "text": "A help message may be viewed by running:  neptune --help", 
            "title": "Parameters"
        }, 
        {
            "location": "/parameters/#mandatory", 
            "text": "Neptune requires the location of the inclusion, exclusion, and output directories. The remaining parameters will be estimated based on the input sequence or revert to default settings. The following is the minimum number of command line parameters required to run Neptune:  neptune\n    --inclusion /path/to/inclusion/directory/\n    --exclusion /path/to/exclusion/directory/\n    --output /path/to/output/directory/  The following parameters are required by Neptune:     Option  Alternative  Parameter  Description      -i  --inclusion  FASTA  A list of inclusion targets in FASTA format. You may list multiple file or directory locations following the parameter. Neptune will automatically include all files within directories. However, Neptune will not recurse into additional directories.    -e  --exclusion  FASTA  A list of exclusion targets in FASTA format. You may list multiple file or directory locations following the parameter. Neptune will automatically include all files within directories. However, Neptune will not recurse into additional directories.    -o  --output  directory  The location of the output directory. If this directory exists, any files produced with existing names will be overwritten. If this directory does not exist, then it will be created.", 
            "title": "Mandatory"
        }, 
        {
            "location": "/parameters/#optional", 
            "text": "The optional parameters will either be automatically calculated or be assigned default values.", 
            "title": "Optional"
        }, 
        {
            "location": "/parameters/#k-mer", 
            "text": "The following parameters relate to  k -mer generation and aggregation:     Option  Alternative  Parameter  Description      -k  --kmer  integer  The size of the  k -mers. This must be a positive integer and should be large enough such that random intra-genome  k -mer matches, within the largest genome, are unexpected. The size of  k -mers cannot be larger than the smallest sequence record. This will be automatically calculated if not specified.     --organization  integer  The degree of organization of  k -mer counting and aggregation. This parameter determines the number nucleotide bases used in parallelized  k -mer counting and, in turn, the number of parallel instances of  k -mer aggregation. The number of parallel instances is determined by 4^n, where n is the specified organization parameter. This value must be a non-negative integer smaller than  k . If the parameter is not specified, then n = 0 and there will be no parallel  k -mer aggregation. This will likely require a much longer computation time to complete  k -mer aggregation.", 
            "title": "k-mer"
        }, 
        {
            "location": "/parameters/#filtering", 
            "text": "The following command-line parameters relate to signature filtering:     Option  Alternative  Parameter  Description       --filter-length  float  The minimum percent length of a signature candidate against a exclusion target required to filter out the candidate. This value is a percentage expressed as a floating point number [0.0, 1.0]. If the any exclusion hit exceeds the percent length  and  percent identity of any candidate, the candidate is removed. The default value is 0.5.     --filter-percent  float  The minimum percent identity of a signature candidate against a exclusion target required to filter out the candidate. The percent identity is calculated as identities divided by the alignment length. This value is a percentage expressed as a floating point number [0.0, 1.0]. If the any exclusion hit exceeds the percent length  and  percent identity of any candidate, the candidate is removed. The default value is 0.5.     --seed-size  integer  The seed size used for alignments. This value must be no smaller than 4. The default value is 11.", 
            "title": "Filtering"
        }, 
        {
            "location": "/parameters/#extraction", 
            "text": "The following command-line parameters relate to signature extraction:     Option  Alternative  Parameter  Description      -r  --reference  FASTA  A list of references from which to extract signatures. If this parameter is not specified, signatures will be extracted from  all  inclusion targets. You may list multiple file locations following the --reference parameter.     --rate  float  The probability (0.0, 1.0) that any two homologous bases are different from each other. This should incorporate mutation rates, sequencing error rates, and assembly error rates. The rate is used to calculate the maximum allowable gap size in a signature and the minimum expected number of exact  k -mer matches in a signature. If this value is not specified, the rate is assumed to be 0.01.     --gc-content  float  The expected GC-content of the environment. The GC-content is used to calculate the maximum allowable gap size in a signature and the minimum expected number of exact  k -mer matches in a signature. If this value is not specified, it is calculated by observing the GC-content of each target during signature extraction. The value must be between (0.0, 1.0).     --confidence  float  The statistical confidence of decision making in the software. The confidence affects the automatic calculation of both the maximum gap size and minimum number of inclusion hits. If this value is not specified, a default of 0.95 is used. The value must be between (0.0, 1.0).     --inhits  integer  The minimum number of inclusion hits required to start and continue signature extraction. If this value is not specified, it will be automatically calculated using the number of inclusion targets, the GC-content, the rate, and the  k -mer size. The calculation can be found in the  Mathematics  documentation. This value must be a positive integer.     --exhits  integer  The minimum number of exclusion hits necessary to stop extraction of a signature. If this value is not specified, it is assumed to be 1. This value must be a positive integer.     --gap  int  The maximum allowable number of base positions shifted before seeing an exact  k -mer match. If this value is not specified, it will be automatically calculated using the rate, GC-content, and the  k -mer size. The calculation can be found in the  Mathematics  documentation. This value must be a positive integer.     --size  int  The minimum size for a signature. Signatures which are shorter than this length will not be reported. If this value is not specified, the minimum signature size will be four times the length of the  k -mer size. It is not recommended to locate signatures smaller than this size, unless application-specific. This value must be a positive integer.", 
            "title": "Extraction"
        }, 
        {
            "location": "/parameters/#parallelization", 
            "text": "The following parameters relate to the parallelization of Neptune:     Option  Alternative  Parameter  Description      -p  --parallelization  integer  The number of parallel working processes to create when Neptune is operating in a non-DRMAA mode (default). This parameter will directly increase the speed of many stages of the software, provided there are sufficient resources available to run the worker process simultaneously. This value must be a positive integer. The default value is 8.", 
            "title": "Parallelization"
        }, 
        {
            "location": "/parameters/#drmaa", 
            "text": "It may be necessary to specify job submission parameters that are required by your cluster-computing environment. If you require DRM-specific command line arguments, they may be provided to Neptune using one of several arguments. The --default-specification parameter will provide the DRM-specific arguments to all jobs which are created. Additional command line arguments allow precise specifications for each type of job.     Option  Alternative  Parameter  Description       --drmaa  flag  This flag enables DRMAA-based Neptune execution. This will require a DRMAA-compatible cluster computing environment to be installed and configured. However, Neptune will likely operate significantly faster in this environment.     --default-specification  string  DRMAA-specific command line arguments for all jobs. These arguments must be provided as a quoted string. The default specification will be applied to all job types and overwritten when specified.     --count-specification  string  DRMAA-specific command line arguments for \\textit{k}-mer counting. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.     --aggregate-specification  string  DRMAA-specific command line arguments for \\textit{k}-mer aggregation. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.     --extract-specification  string  DRMAA-specific command line arguments for signature extraction. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.     --database-specification  string  DRMAA-specific command line arguments for database construction. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.     --filter-specification  string  DRMAA-specific command line arguments for candidate signature filtering. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.     --consolidate-specification  string  DRMAA-specific command line arguments for signature consolidation. These arguments must be provided as a quoted string. These arguments will overwrite the default specification, if specified, for this job type.", 
            "title": "DRMAA"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\nBasic Execution\n\n\nThe following basic example will report all of the signatures that are sufficiently shared by the (FASTA) sequences in the inclusion directory and sufficiently absent from the (FASTA) sequences in the exclusion directory. Neptune will automatically calculate many of the parameters used in this execution.\n\n\nneptune\n    --inclusion inclusion_directory/\n    --exclusion exclusion_directory/\n    --output output_directory/\n\n\n\n\nThe output of immediate interest will be located in the follow file:\n\n\noutput_directory/consolidated/consolidated.fasta\n\n\n\nThis file will contain a consolidated list of signatures, sorted by their Neptune score, which is a combined estimate of sensitivity and specificity. The signatures with higher scores, near the top of the file, are considered the most discriminatory signatures.\n\n\nFaster Execution\n\n\nThe following example highlights options that allow Neptune to run faster when running in parallel mode (default). It will attempt to run Neptune on 16 parallel processes (\n--parallelization\n) and parallelize \nk\n-mer counting and aggregation into 64 tasks (\n--organization\n) distributed over the 16 parallel processes available.\n\n\nneptune\n    --inclusion inclusion_directory/\n    --exclusion exclusion_directory/\n    --output output_directory/\n    --parallelization 16\n    --organization 3\n\n\n\n\nSpecifying File Locations\n\n\nYou may wish to specify particular files used in signature discovery. This may be important when specifying references for signature extraction:\n\n\nneptune\n    --inclusion inclusion_dir/ in1.fasta in2.fasta\n    --exclusion exclusion_dir/ ex1.fasta ex2.fasta\n    --reference in1.fasta in2.fasta\n    --output output/\n\n\n\n\nDRMAA Parameters\n\n\nIt may be necessary to specify DRMAA native specification parameters to accommodate Neptune job scheduling. This example specifies the resources required by all jobs (--default-specification) and further specifies that \nk\n-mer aggregation jobs (--aggregate-specification) will require more memory. The remaining Neptune parameters are automatically calculated.\n\n\nneptune\n    --inclusion inclusion/\n    --exclusion exclusion/\n    --output output/\n    --default-specification \n-l h_vmem=6G -pe smp 4\n\n    --aggregate-specification \n-l h_vmem=10G -pe smp 4", 
            "title": "Simple"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#basic-execution", 
            "text": "The following basic example will report all of the signatures that are sufficiently shared by the (FASTA) sequences in the inclusion directory and sufficiently absent from the (FASTA) sequences in the exclusion directory. Neptune will automatically calculate many of the parameters used in this execution.  neptune\n    --inclusion inclusion_directory/\n    --exclusion exclusion_directory/\n    --output output_directory/  The output of immediate interest will be located in the follow file:  output_directory/consolidated/consolidated.fasta  This file will contain a consolidated list of signatures, sorted by their Neptune score, which is a combined estimate of sensitivity and specificity. The signatures with higher scores, near the top of the file, are considered the most discriminatory signatures.", 
            "title": "Basic Execution"
        }, 
        {
            "location": "/examples/#faster-execution", 
            "text": "The following example highlights options that allow Neptune to run faster when running in parallel mode (default). It will attempt to run Neptune on 16 parallel processes ( --parallelization ) and parallelize  k -mer counting and aggregation into 64 tasks ( --organization ) distributed over the 16 parallel processes available.  neptune\n    --inclusion inclusion_directory/\n    --exclusion exclusion_directory/\n    --output output_directory/\n    --parallelization 16\n    --organization 3", 
            "title": "Faster Execution"
        }, 
        {
            "location": "/examples/#specifying-file-locations", 
            "text": "You may wish to specify particular files used in signature discovery. This may be important when specifying references for signature extraction:  neptune\n    --inclusion inclusion_dir/ in1.fasta in2.fasta\n    --exclusion exclusion_dir/ ex1.fasta ex2.fasta\n    --reference in1.fasta in2.fasta\n    --output output/", 
            "title": "Specifying File Locations"
        }, 
        {
            "location": "/examples/#drmaa-parameters", 
            "text": "It may be necessary to specify DRMAA native specification parameters to accommodate Neptune job scheduling. This example specifies the resources required by all jobs (--default-specification) and further specifies that  k -mer aggregation jobs (--aggregate-specification) will require more memory. The remaining Neptune parameters are automatically calculated.  neptune\n    --inclusion inclusion/\n    --exclusion exclusion/\n    --output output/\n    --default-specification  -l h_vmem=6G -pe smp 4 \n    --aggregate-specification  -l h_vmem=10G -pe smp 4", 
            "title": "DRMAA Parameters"
        }, 
        {
            "location": "/walkthrough/", 
            "text": "Walkthrough\n\n\nOverview\n\n\nThe purpose of this walkthrough will be to illustrate a simple, but complete example of using Neptune to locate discriminatory sequences. We will identity signature sequences within an artificial data set containing three inclusion sequences and three exclusion sequences. The output will be a list of signatures, sorted by score, for each inclusion target, and one consolidated signatures file, sorted by signature score, containing signatures from all inclusion targets.\n\n\nInput Data\n\n\nWe will be using very small, artificial genomes for this walkthrough. However, these small genomes will be sufficient to illustrate the operation of Neptune. The artificial genome sequence content is derived from \nEscherichia coli\n and has been modified to introduce simple variation between genomes.\n\n\nThe example inclusion genomes are located in the following location:\n\n\nneptune/tests/data/example/inclusion/\n\n\n\n\nThe example exclusion genomes are located in the following location:\n\n\nneptune/tests/data/example/exclusion/\n\n\n\n\nThe inclusion and exclusion directories each contain three FASTA format genomes. The genomes all have some insertions and deletions that differentiate them from each other. However, the three inclusion genomes primarily differ from the three exclusion genomes in that they share large sequences that are absent from all exclusion genomes.\n\n\nRunning Neptune\n\n\nNeptune will automatically calculate many of the parameters that might otherwise be specified by the user, such as the minimum number of targets signature sequence must be present within for it to be considered shared sequence. At minimum, Neptune requires the user specify the inclusion sequences, exclusion sequences, and an output directory. We will provide Neptune inclusion and exclusion sequences in the form of FASTA file genomes located within directories. The following command will run Neptune on the example data and output to the specified directory:\n\n\nneptune\n    --inclusion tests/data/example/inclusion/\n    --exclusion tests/data/example/exclusion/\n    --output output/\n\n\n\n\nOutput\n\n\nStandard Output\n\n\nAfter running Neptune, very similar output will be printed to standard output, indicating that Neptune is starting and completing different stages of operation:\n\n\nNeptune v1.2.4\n\nEstimating k-mer size ...\nk = 15\n\nk-mer Counting...\nSubmitted 12 jobs.\n0.002063 seconds\n\nk-mer Aggregation...\nSubmitted 65 jobs.\n0.010473 seconds\n\nSignature Extraction...\nSubmitted 6 jobs.\n0.000771 seconds\n\nSignature Filtering...\nSubmitted 2 jobs.\nSubmitted 6 jobs.\n0.002498 seconds\n\nConsolidate Signatures...\nSubmitted 1 jobs.\n0.000411 seconds\n\nComplete!\n\n\n\n\nConsolidated Signatures\n\n\nAs we did not specify references from which to extract signatures, Neptune will automatically investigate all inclusion genomes for signatures and consolidate those signatures into a single consolidated signature file. The \noutput/consolidated/consolidated.fasta\n file contains these consolidated signatures. This file may be understood as the final output of the application. The following FASTA output is from the consolidated signatures file produced from this example:\n\n\n1.0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion1 pos=99\nTAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC...\n\n1.1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion1 pos=3497\nCGCGGGCGATATTTTCACAGCCATTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCAG...\n\n1.2 score=0.9966 in=0.9966 ex=0.0000 len=98 ref=inclusion1 pos=5209\nGCGAGTTTTGCGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGGA...\n\n\n\n\nThe FASTA header contains information relavent to the identified signature. A detailed explanation of this information is located within the \noutput section\n of this documentation. The \nscore\n is the sum of the \nin\n (inclusion/sensitivity) and \nex\n (exclusion/specificity) scores, and represents a combined measure of sensitivity and specificity. The \nlength\n describes the length of the signature in bases. The \nref\n (reference) and \npos\n (position) describe the location of the signature within the reference FASTA record it was extracted from.\n\n\nIn this example, Neptune identified three signatures: 1.0, 1.1, and 1.2 of lengths 103, 640, and 98, respectively. We see that all of these signatures originated from the inclusion1 reference. These signatures were located at positions 99, 3497, and 5209 within the inclusion1 reference. These signatures are of very high quality, within the context of our data set, with scores of 1.0000, 0.9979, and 0.9969, within the possible range of score values from -1.00 to +1.00.\n\n\nSorted Signatures\n\n\nIf we're interested in looking at the signatures produced from each individual inclusion target, we need to investigate the output in the \noutput/sorted\n directory. The following are the signatures extracted exclusively from the inclusion1.fasta target:\n\n\n0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion1 pos=99\nTAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC...\n\n1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion1 pos=3497\nCGCGGGCGATATTTTCACAGCCATTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCAG...\n\n2 score=0.9966 in=0.9966 ex=0.0000 len=98 ref=inclusion1 pos=5209\nGCGAGTTTTGCGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGGA...\n\n\n\n\nThe following are the signatures extracted exclusively from the \\textit{inclusion2.fasta} target:\n\n\n0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion2 pos=99\nTAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC...\n\n1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion2 pos=3494\nCGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA...\n\n2 score=0.9933 in=0.9933 ex=0.0000 len=99 ref=inclusion2 pos=5206\nGCGAGTTTTGACGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGG...\n\n\n\n\nThe following are the signatures extracted exclusively from the \\textit{inclusion3.fasta} target:\n\n\n0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion3 pos=99\nTAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC...\n\n2 score=0.9833 in=0.9833 ex=0.0000 len=100 ref=inclusion3 pos=5203\nGCGAGTTTTAACGAGATGGTGCCGGAGTTCATCGAAAAAATGGACCGAGGCACTGCTGAAATTGGTTTTGTATTTGGG...\n\n1 score=0.9792 in=0.9979 ex=0.0187 len=640 ref=inclusion3 pos=3492\nCGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA...\n\n\n\n\nThe output from these files appears very similar, as is expected when Neptune identifies highly discriminatory signatures from a homogeneous data set. However, there are some slight differences between some of these signatures. For example, the signatures in each of these output files have corresponding ID numbers and some of these signatures have slight differences. However, because Neptune assigns signature IDs arbitrarily, this correspondence will usually never happen when using real data. Nonetheless, we see that signature ID 2 is slightly different sizes in all three inclusion targets (5209, 5206, and 5203) with slightly different scores (0.9966, 0.9933, 0.9833). Another slight difference between the signatures is the sequence similarity of signature ID 1 in inclusion3.fasta with exclusion sequence:\n\n\n1 score=0.9792 in=0.9979 ex=0.0187 len=640 ref=inclusion3 pos=3492\nCGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA...\n\n\n\n\nThis signature had some similarity with exclusion sequence, represented by the \nex=0.0187\n, and indicates a small amount of imprecision in this signature. This example also illustrates that the \nscore\n (0.9792) is the sum of the \nin\n (0.9979) and \nex\n (0.0187) values.\n\n\nThese differences in signatures from each inclusion target are a consequence of sequence differences. The user's discretion will be required in determining which of these are most appropriate. Nonetheless, as described above, Neptune will attempt to consolidate these signatures into a single output file, if a single answer is desirable.", 
            "title": "Walkthrough"
        }, 
        {
            "location": "/walkthrough/#walkthrough", 
            "text": "", 
            "title": "Walkthrough"
        }, 
        {
            "location": "/walkthrough/#overview", 
            "text": "The purpose of this walkthrough will be to illustrate a simple, but complete example of using Neptune to locate discriminatory sequences. We will identity signature sequences within an artificial data set containing three inclusion sequences and three exclusion sequences. The output will be a list of signatures, sorted by score, for each inclusion target, and one consolidated signatures file, sorted by signature score, containing signatures from all inclusion targets.", 
            "title": "Overview"
        }, 
        {
            "location": "/walkthrough/#input-data", 
            "text": "We will be using very small, artificial genomes for this walkthrough. However, these small genomes will be sufficient to illustrate the operation of Neptune. The artificial genome sequence content is derived from  Escherichia coli  and has been modified to introduce simple variation between genomes.  The example inclusion genomes are located in the following location:  neptune/tests/data/example/inclusion/  The example exclusion genomes are located in the following location:  neptune/tests/data/example/exclusion/  The inclusion and exclusion directories each contain three FASTA format genomes. The genomes all have some insertions and deletions that differentiate them from each other. However, the three inclusion genomes primarily differ from the three exclusion genomes in that they share large sequences that are absent from all exclusion genomes.", 
            "title": "Input Data"
        }, 
        {
            "location": "/walkthrough/#running-neptune", 
            "text": "Neptune will automatically calculate many of the parameters that might otherwise be specified by the user, such as the minimum number of targets signature sequence must be present within for it to be considered shared sequence. At minimum, Neptune requires the user specify the inclusion sequences, exclusion sequences, and an output directory. We will provide Neptune inclusion and exclusion sequences in the form of FASTA file genomes located within directories. The following command will run Neptune on the example data and output to the specified directory:  neptune\n    --inclusion tests/data/example/inclusion/\n    --exclusion tests/data/example/exclusion/\n    --output output/", 
            "title": "Running Neptune"
        }, 
        {
            "location": "/walkthrough/#output", 
            "text": "", 
            "title": "Output"
        }, 
        {
            "location": "/walkthrough/#standard-output", 
            "text": "After running Neptune, very similar output will be printed to standard output, indicating that Neptune is starting and completing different stages of operation:  Neptune v1.2.4\n\nEstimating k-mer size ...\nk = 15\n\nk-mer Counting...\nSubmitted 12 jobs.\n0.002063 seconds\n\nk-mer Aggregation...\nSubmitted 65 jobs.\n0.010473 seconds\n\nSignature Extraction...\nSubmitted 6 jobs.\n0.000771 seconds\n\nSignature Filtering...\nSubmitted 2 jobs.\nSubmitted 6 jobs.\n0.002498 seconds\n\nConsolidate Signatures...\nSubmitted 1 jobs.\n0.000411 seconds\n\nComplete!", 
            "title": "Standard Output"
        }, 
        {
            "location": "/walkthrough/#consolidated-signatures", 
            "text": "As we did not specify references from which to extract signatures, Neptune will automatically investigate all inclusion genomes for signatures and consolidate those signatures into a single consolidated signature file. The  output/consolidated/consolidated.fasta  file contains these consolidated signatures. This file may be understood as the final output of the application. The following FASTA output is from the consolidated signatures file produced from this example:  1.0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion1 pos=99\nTAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... 1.1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion1 pos=3497\nCGCGGGCGATATTTTCACAGCCATTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCAG... 1.2 score=0.9966 in=0.9966 ex=0.0000 len=98 ref=inclusion1 pos=5209\nGCGAGTTTTGCGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGGA...  The FASTA header contains information relavent to the identified signature. A detailed explanation of this information is located within the  output section  of this documentation. The  score  is the sum of the  in  (inclusion/sensitivity) and  ex  (exclusion/specificity) scores, and represents a combined measure of sensitivity and specificity. The  length  describes the length of the signature in bases. The  ref  (reference) and  pos  (position) describe the location of the signature within the reference FASTA record it was extracted from.  In this example, Neptune identified three signatures: 1.0, 1.1, and 1.2 of lengths 103, 640, and 98, respectively. We see that all of these signatures originated from the inclusion1 reference. These signatures were located at positions 99, 3497, and 5209 within the inclusion1 reference. These signatures are of very high quality, within the context of our data set, with scores of 1.0000, 0.9979, and 0.9969, within the possible range of score values from -1.00 to +1.00.", 
            "title": "Consolidated Signatures"
        }, 
        {
            "location": "/walkthrough/#sorted-signatures", 
            "text": "If we're interested in looking at the signatures produced from each individual inclusion target, we need to investigate the output in the  output/sorted  directory. The following are the signatures extracted exclusively from the inclusion1.fasta target:  0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion1 pos=99\nTAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... 1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion1 pos=3497\nCGCGGGCGATATTTTCACAGCCATTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCAG... 2 score=0.9966 in=0.9966 ex=0.0000 len=98 ref=inclusion1 pos=5209\nGCGAGTTTTGCGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGGA...  The following are the signatures extracted exclusively from the \\textit{inclusion2.fasta} target:  0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion2 pos=99\nTAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... 1 score=0.9979 in=0.9979 ex=0.0000 len=640 ref=inclusion2 pos=3494\nCGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA... 2 score=0.9933 in=0.9933 ex=0.0000 len=99 ref=inclusion2 pos=5206\nGCGAGTTTTGACGAGATGGTGCCGGAGTTCATCGAAAAAATGGACGAGGCACTGCTGAAATTGGTTTTGTATTTGGGG...  The following are the signatures extracted exclusively from the \\textit{inclusion3.fasta} target:  0 score=1.0000 in=1.0000 ex=0.0000 len=103 ref=inclusion3 pos=99\nTAGTCTCCAGGATTCCCGGGGCGGTTCAGATAATCTTAGCATTGACCGCCTTTATATAGAAGCTGTTATTCAAGAAGC... 2 score=0.9833 in=0.9833 ex=0.0000 len=100 ref=inclusion3 pos=5203\nGCGAGTTTTAACGAGATGGTGCCGGAGTTCATCGAAAAAATGGACCGAGGCACTGCTGAAATTGGTTTTGTATTTGGG... 1 score=0.9792 in=0.9979 ex=0.0187 len=640 ref=inclusion3 pos=3492\nCGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA...  The output from these files appears very similar, as is expected when Neptune identifies highly discriminatory signatures from a homogeneous data set. However, there are some slight differences between some of these signatures. For example, the signatures in each of these output files have corresponding ID numbers and some of these signatures have slight differences. However, because Neptune assigns signature IDs arbitrarily, this correspondence will usually never happen when using real data. Nonetheless, we see that signature ID 2 is slightly different sizes in all three inclusion targets (5209, 5206, and 5203) with slightly different scores (0.9966, 0.9933, 0.9833). Another slight difference between the signatures is the sequence similarity of signature ID 1 in inclusion3.fasta with exclusion sequence:  1 score=0.9792 in=0.9979 ex=0.0187 len=640 ref=inclusion3 pos=3492\nCGCGGGCGATATTTTCACAGCCATTTTCAGGAGTTCAGCCATGAACGCTTATTACATTCAGGATCGTCTTGAGGCTCA...  This signature had some similarity with exclusion sequence, represented by the  ex=0.0187 , and indicates a small amount of imprecision in this signature. This example also illustrates that the  score  (0.9792) is the sum of the  in  (0.9979) and  ex  (0.0187) values.  These differences in signatures from each inclusion target are a consequence of sequence differences. The user's discretion will be required in determining which of these are most appropriate. Nonetheless, as described above, Neptune will attempt to consolidate these signatures into a single output file, if a single answer is desirable.", 
            "title": "Sorted Signatures"
        }, 
        {
            "location": "/output/", 
            "text": "Output\n\n\nNeptune's output directory contains the following items:\n\n\n\n\n\n\n\n\nItem\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncandidates\n\n\ndirectory\n\n\nThe directory containing signature candidates in extracted order.\n\n\n\n\n\n\nfiltered\n\n\ndirectory\n\n\nThe directory containing filtered signature candidates in extracted order.\n\n\n\n\n\n\nsorted\n\n\ndirectory\n\n\nThe directory containing filtered signatures in signature-score sorted order.\n\n\n\n\n\n\nconsolidated\n\n\ndirectory\n\n\nThe directory containing the consolidate signatures from multiple sorted-signature reference files.\n\n\n\n\n\n\ndatabase\n\n\ndirectory\n\n\nThe directory containing Neptune's BLAST constructed databases.\n\n\n\n\n\n\naggregate.kmers\n\n\nfile\n\n\nThe \nk\n-mer file containing all observed k-mers.\n\n\n\n\n\n\nreceipt.txt\n\n\nfile\n\n\nThe file containing Neptune's run receipt.\n\n\n\n\n\n\n\n\nA file with the same name as each reference will be placed in each output directory (candidates, filtered, sorted), corresponding to the reference file from which it was derived.\n\n\nCandidates\n\n\nThe candidate signatures are the sequences produced from the signature extraction step. These signatures will relatively sensitive, but not necessarily specific. This is because signature extraction is done using exact \nk\n-mer matches. The candidate signatures are guaranteed to contain no more exact matches with any exclusion \nk\n-mer than specified by the \n--exhits\n parameter. However, there may be inexact matches with exclusion targets.\n\n\nFiltered\n\n\nThe filtering step is designed to remove signatures which are not interesting enough to warrant further investigation, because the negative component of their score is prohibitively large. The filtering step removes signatures that align sufficiently with any exclusion target. The filtered signatures are a subset of the candidate signatures.\n\n\nSorted\n\n\nThe sorted signatures files are organized as FASTA records containing the same signatures as their filtered signatures counterparts. However, the signatures are listed in descending order by their signature score. Signatures are assigned a score corresponding to their highest-scoring BLAST alignments with all inclusion and exclusion targets, which is a sum of a positive inclusion component and a negative exclusion component. This score is maximized when all inclusion targets contain a region exactly matching the entire signature and there exists no exclusion targets that match the signature.\n\n\nConsolidated\n\n\nThe sorted signatures from all references are combined into a single \"consolidated.fasta\" file, located within the \"consolidated\" directory. Signatures are added to the consolidated signatures file in a greedy manner by selecting the next highest scoring signature available from all references. While effort is taken to prevent signatures from overlapping entirely, it is possible for consolidate signatures to have a small amount of overlap. In many circumstances, this output might be considered the final output of Neptune.\n\n\nDatabases\n\n\nThe databases directory contains BLAST databases constructed from the inclusion and exclusion files.\n\n\nAggregate k-mers\n\n\nThe aggregated \nk\n-mers file, aggregated.kmers, contains a list of all \nk\n-mers observed in the inclusion and exclusion groups. These \nk\n-mers are sorted and followed by two integers: the number of inclusion and exclusion targets the \nk\n-mer appears in, respectively.\n\n\nRun Receipt\n\n\nThe run receipt contains information about the Neptune execution. It contains a list of all the files in the inclusion and exclusion group, and the command line parameters used for the execution.", 
            "title": "Neptune"
        }, 
        {
            "location": "/output/#output", 
            "text": "Neptune's output directory contains the following items:     Item  Type  Description      candidates  directory  The directory containing signature candidates in extracted order.    filtered  directory  The directory containing filtered signature candidates in extracted order.    sorted  directory  The directory containing filtered signatures in signature-score sorted order.    consolidated  directory  The directory containing the consolidate signatures from multiple sorted-signature reference files.    database  directory  The directory containing Neptune's BLAST constructed databases.    aggregate.kmers  file  The  k -mer file containing all observed k-mers.    receipt.txt  file  The file containing Neptune's run receipt.     A file with the same name as each reference will be placed in each output directory (candidates, filtered, sorted), corresponding to the reference file from which it was derived.", 
            "title": "Output"
        }, 
        {
            "location": "/output/#candidates", 
            "text": "The candidate signatures are the sequences produced from the signature extraction step. These signatures will relatively sensitive, but not necessarily specific. This is because signature extraction is done using exact  k -mer matches. The candidate signatures are guaranteed to contain no more exact matches with any exclusion  k -mer than specified by the  --exhits  parameter. However, there may be inexact matches with exclusion targets.", 
            "title": "Candidates"
        }, 
        {
            "location": "/output/#filtered", 
            "text": "The filtering step is designed to remove signatures which are not interesting enough to warrant further investigation, because the negative component of their score is prohibitively large. The filtering step removes signatures that align sufficiently with any exclusion target. The filtered signatures are a subset of the candidate signatures.", 
            "title": "Filtered"
        }, 
        {
            "location": "/output/#sorted", 
            "text": "The sorted signatures files are organized as FASTA records containing the same signatures as their filtered signatures counterparts. However, the signatures are listed in descending order by their signature score. Signatures are assigned a score corresponding to their highest-scoring BLAST alignments with all inclusion and exclusion targets, which is a sum of a positive inclusion component and a negative exclusion component. This score is maximized when all inclusion targets contain a region exactly matching the entire signature and there exists no exclusion targets that match the signature.", 
            "title": "Sorted"
        }, 
        {
            "location": "/output/#consolidated", 
            "text": "The sorted signatures from all references are combined into a single \"consolidated.fasta\" file, located within the \"consolidated\" directory. Signatures are added to the consolidated signatures file in a greedy manner by selecting the next highest scoring signature available from all references. While effort is taken to prevent signatures from overlapping entirely, it is possible for consolidate signatures to have a small amount of overlap. In many circumstances, this output might be considered the final output of Neptune.", 
            "title": "Consolidated"
        }, 
        {
            "location": "/output/#databases", 
            "text": "The databases directory contains BLAST databases constructed from the inclusion and exclusion files.", 
            "title": "Databases"
        }, 
        {
            "location": "/output/#aggregate-k-mers", 
            "text": "The aggregated  k -mers file, aggregated.kmers, contains a list of all  k -mers observed in the inclusion and exclusion groups. These  k -mers are sorted and followed by two integers: the number of inclusion and exclusion targets the  k -mer appears in, respectively.", 
            "title": "Aggregate k-mers"
        }, 
        {
            "location": "/output/#run-receipt", 
            "text": "The run receipt contains information about the Neptune execution. It contains a list of all the files in the inclusion and exclusion group, and the command line parameters used for the execution.", 
            "title": "Run Receipt"
        }, 
        {
            "location": "/format/", 
            "text": "Signature Format\n\n\nThe signatures produced by Neptune are output in FASTA format with additional information in the description line. Signatures are output in the following format:\n\n\n[ID] [SCORE] [IN SCORE] [EX SCORE] [LENGTH] [REF] [POS]\n[SEQUENCE]\n\n\n\n\nThe following is an example:\n\n\n425 score=0.86 in=0.98 ex=-0.13 len=31 ref=ecoli pos=160\nTGTCATTCTCCTGTTCTGCCTGTATCACTGC\n\n\n\n\nWhere:\n\n\n\n\n\n\n\n\nItem\n\n\nFull Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n[ID]\n\n\nID\n\n\nAn \narbitrary\n, run-unique ID assigned to the signature.\n\n\n\n\n\n\n[SCORE]\n\n\nScore\n\n\nThe total signature score. This is the sum of the inclusion (sensitivity) and exclusion (specificity) scores.\n\n\n\n\n\n\n[IN SCORE]\n\n\nInclusion Score\n\n\nThe positive inclusion component of signature score (sensitivity).\n\n\n\n\n\n\n[EX SCORE]\n\n\nExclusion Score\n\n\nThe negative exclusion component of signature score (specificity).\n\n\n\n\n\n\n[LENGTH]\n\n\nLength\n\n\nThe signature length in bases.\n\n\n\n\n\n\n[REF]\n\n\nReference\n\n\nThe unique identifier of the contig from which the signature was extracted.\n\n\n\n\n\n\n[POS]\n\n\nPosition\n\n\nThe starting position of the signature in the reference.\n\n\n\n\n\n\n[SEQUENCE]\n\n\nSequence\n\n\nThe sequence content of the signature.\n\n\n\n\n\n\n\n\nID\n\n\nThe signature ID is an \narbitrary\n, run-unique ID assigned to the signature. The signatures within the same FASTA file will have unique IDs, relative to each other. However, signatures within multiple output files will have overlapping signature IDs. This will be the case when using multiple references or not specifying any reference files. The signatures within the \nconsolidated.fasta\n output will have unique signature IDs.\n\n\nTotal Score\n\n\nSignatures are assigned a score corresponding to their highest-scoring BLAST alignments with all inclusion and exclusion targets, which is a sum of the positive inclusion score (sensitivity) and the negative exclusion component (specificity). This score is maximized when all inclusion targets contain a region exactly matching the entire signature and there exists no exclusion targets that match the signature.\n\n\nInclusion Score\n\n\nThe inclusion score is a non-negative number between 0.00 and 1.00 and relates to the signature's sensitivity. This score is determined by the signature's highest-scoring BLAST alignments with all inclusion targets. The inclusion score is maximized (good) when the signature is found exactly and completely in all inclusion targets and minimized (bad) when the signature is not found whatsoever in any inclusion targets.\n\n\nExclusion Score\n\n\nThe exclusion score is a non-positive number between -1.00 and 0.00 and relates to the signature's specificity. This score is determined by the signature's highest-scoring BLAST alignments with all exclusion targets. The exclusion score is maximized (bad) when the signature is found exactly and completely in all exclusion targets and minimized (good) when the signature is not found whatsoever in any exclusion targets.\n\n\nLength\n\n\nThe length describes the length of the signature in bases. Although this can be calculated from the sequence, it is included in the FASTA description to accommodate other tools.\n\n\nReference\n\n\nThe reference describes the sequence identifier of the contig the signature was extracted from. This is useful for determining where the signature lies and what sequence surrounds it.\n\n\nPosition\n\n\nThe position describes the base position of the signature within the contig reference it was extracted from. This is useful for determining where the signature lies and what sequence surrounds it.\n\n\nSequence\n\n\nThe sequence describes the sequence content of the signature and follows the specifications of FASTA format. However, the sequence will not contain line breaks, regardless of the sequence length.", 
            "title": "Signature Format"
        }, 
        {
            "location": "/format/#signature-format", 
            "text": "The signatures produced by Neptune are output in FASTA format with additional information in the description line. Signatures are output in the following format:  [ID] [SCORE] [IN SCORE] [EX SCORE] [LENGTH] [REF] [POS]\n[SEQUENCE]  The following is an example:  425 score=0.86 in=0.98 ex=-0.13 len=31 ref=ecoli pos=160\nTGTCATTCTCCTGTTCTGCCTGTATCACTGC  Where:     Item  Full Name  Description      [ID]  ID  An  arbitrary , run-unique ID assigned to the signature.    [SCORE]  Score  The total signature score. This is the sum of the inclusion (sensitivity) and exclusion (specificity) scores.    [IN SCORE]  Inclusion Score  The positive inclusion component of signature score (sensitivity).    [EX SCORE]  Exclusion Score  The negative exclusion component of signature score (specificity).    [LENGTH]  Length  The signature length in bases.    [REF]  Reference  The unique identifier of the contig from which the signature was extracted.    [POS]  Position  The starting position of the signature in the reference.    [SEQUENCE]  Sequence  The sequence content of the signature.", 
            "title": "Signature Format"
        }, 
        {
            "location": "/format/#id", 
            "text": "The signature ID is an  arbitrary , run-unique ID assigned to the signature. The signatures within the same FASTA file will have unique IDs, relative to each other. However, signatures within multiple output files will have overlapping signature IDs. This will be the case when using multiple references or not specifying any reference files. The signatures within the  consolidated.fasta  output will have unique signature IDs.", 
            "title": "ID"
        }, 
        {
            "location": "/format/#total-score", 
            "text": "Signatures are assigned a score corresponding to their highest-scoring BLAST alignments with all inclusion and exclusion targets, which is a sum of the positive inclusion score (sensitivity) and the negative exclusion component (specificity). This score is maximized when all inclusion targets contain a region exactly matching the entire signature and there exists no exclusion targets that match the signature.", 
            "title": "Total Score"
        }, 
        {
            "location": "/format/#inclusion-score", 
            "text": "The inclusion score is a non-negative number between 0.00 and 1.00 and relates to the signature's sensitivity. This score is determined by the signature's highest-scoring BLAST alignments with all inclusion targets. The inclusion score is maximized (good) when the signature is found exactly and completely in all inclusion targets and minimized (bad) when the signature is not found whatsoever in any inclusion targets.", 
            "title": "Inclusion Score"
        }, 
        {
            "location": "/format/#exclusion-score", 
            "text": "The exclusion score is a non-positive number between -1.00 and 0.00 and relates to the signature's specificity. This score is determined by the signature's highest-scoring BLAST alignments with all exclusion targets. The exclusion score is maximized (bad) when the signature is found exactly and completely in all exclusion targets and minimized (good) when the signature is not found whatsoever in any exclusion targets.", 
            "title": "Exclusion Score"
        }, 
        {
            "location": "/format/#length", 
            "text": "The length describes the length of the signature in bases. Although this can be calculated from the sequence, it is included in the FASTA description to accommodate other tools.", 
            "title": "Length"
        }, 
        {
            "location": "/format/#reference", 
            "text": "The reference describes the sequence identifier of the contig the signature was extracted from. This is useful for determining where the signature lies and what sequence surrounds it.", 
            "title": "Reference"
        }, 
        {
            "location": "/format/#position", 
            "text": "The position describes the base position of the signature within the contig reference it was extracted from. This is useful for determining where the signature lies and what sequence surrounds it.", 
            "title": "Position"
        }, 
        {
            "location": "/format/#sequence", 
            "text": "The sequence describes the sequence content of the signature and follows the specifications of FASTA format. However, the sequence will not contain line breaks, regardless of the sequence length.", 
            "title": "Sequence"
        }
    ]
}